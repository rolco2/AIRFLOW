스노우 플레이크 

* 공유 디스크(확장가능) 아키텍처 
 - 중앙 저장 위치에 데이터를 저장하고 여러 데이터베이스 클러스터 노드에서 엑세스할 수 있도록
   설계된 초기 확장 접근 방식  대표적인 예 = 오라클 RAC
 1. 장단점
    - 데이터 관리가 단순하다. 
    - 디스크에 기록되어 각 클러스터 노드에서 엑세스하는 데이터를 지속적으로 사용할 수 있다.
	- 일관성 보장에 복잡한 온디스크 잠금 메커니즘으로 병목현상 발생
	- 많은 사용자가 데이터베이스 내의 여러 트랜잭션에 영향을 줄 수 있는 데이터 동시성도 주요 문제
	- 노드가 많이 질수록 아키텍처에 문제가 더 복잡해 질수 있다. 
	
* 비공유(확장가능) 아키텍처
  -  스토리지와 컴퓨팅이 함께 확장되는 비공유 아키텍처에 의해 생성된 병목 현상에 대응하여 설계
  1. 장단점
     - 스토리지와 컴퓨팅 간의 올바른 균형을 맞추는 것이 어려움
	 - 과도하게 준비하면 필요하지도 않고 사용하지도 않는 리소스 비용 초래가능

* NoSQL ( not only sql)
   - 주로 비공유 아키텍처에 사용됨
   - 데이터를 변환할 필요 없이 비관게형 데이터를 저장할 수 있음
   
   1. 데이터 유형
     1) 문서 저장소(Document stores)
	 2) 키-값 저장소(key-value, KV)
	 3) 열 페밀리 데이터 저장소 (wide column data stores)
	 4) 그래프 데이터베이스(graph database)
	 
* Snowflake 아키텍처
 - 스토리지와 컴퓨팅을 물리적으로 분리하지만 논리적으로 통합
 - 클라우드 서비스 계층, 컴퓨팅 계층, 데이터 저장 계층으로 나눠짐 
 
   1. 클라우드 서비스 계층
    - 인증, 엑세스 제어 및 암호화와 같은 활동을 조정하는 서비스 모음
	- 인프라 및 메타에이터 처리하고 쿼리 구문 분석 및 최적화 수행을 하기 위한 관리 기능
	- 다양한 서비스 계층 구성 요소가 함께 작동하여 사용자가 로그인을 요청할 떄부터 처리 한다.
	- infrastructure manager, optimizer, Transaction manager, security, results cache
	
   2. 쿼리 프로세싱 컴퓨팅 계층
    - 사용자의 요청이 잇을시 생성, 배포 된다. 
	- snowflake 가상 웨어하우스는 독립적으로 운영되며 다른 가상웨어하우스와 컴퓨팅 자원을 공유하지 않음
	- 세션에서 실행 될 떄마다 크레딧을 소모, 그러나 언제든지 시작, 중지 가능 실행중에도 크기 조정이 가능
	1) 가상 웨어하우스 
	   - x-small .....4x-lange  
       - 소모크레딧   x-small = 1 small=2 , medium = 4, lage =8...
	   - 기본 1분 단위로 계산 / 20초를 사용해도 1분 사용량
	   - 동시성을 위해서는 멀티클러스터 가상 웨어하우스로 확장가능
	   - 동일한 사이즈의 가상웨어하우스를 scale out 하는것
	
	
* 워크로드 분리 및 관리 
  - 다양한 사용자 그룹이 다양한 크기의 다른 Snowflake 가상 웨어하우스에 할당될 수 있다. 
  - 동시성 문제르 ㄹ피하기 위해 자동으로 조절 가능하다 
    ex) USE ROLE SYSADMIN;
	    CREATE OR REPLACE WAREHOUSE ACCOUNTING_wH
		WITH warehouse_Size = MEDIUM MIN_CLUSTER_COUNT = 1
		MAX_CLUSTER_COUNT = 6 SCALING_POLICY = 'STANDARD';

* 가상 웨어하우스 계층에 대한 과금
  - 클러스터당 서버수,
    멀티 클러스터 가상 웨어하우스가 있는 경우 클러수터 수,
	각 클러스터 서버가 실행되는 시간에 따라 결정되는 웨어하우스 크기 
  - Snowflake 초당 과금하며 가상 웨어하우스가 시작되거나 크기가 조정될 떄마다 최소 60초 과금
  - 가상 웨어하우스가 확장되면 프로비저닝된 추가 리소스의 1분에 대한 크레딧이 과금
  - 초단위로 계산되지만 시간 단위로 나누어 보고된다.
  * 계정 아래 Usage를 클릭하면 계정장 크레딧 사용량을 확인할 수 있다. 
    SNOWFLAKE 공유 데이터 베이스에서 계정 사용량 뷰를 쿼리하여 정보를 얻을 수도 있다.
	
* 중앙집중식 (하이브리드 컬럼) 데이터베이스 스토리지 계층
  - 정형 및 반정형 데이터를 포함한 모든 데이터를 보유한다. 
  - 데이터 로딩되면 합축된 열 형식으로 최적화, 재구성되어 저장 
  - 스토리지 크기가 증가나 감소해도 가상 웨어하우스 크기에는 영향을 미치지 않음 독립적임
  
* Zero-Copy Cloning
  - Zero-copy는 데타데이터 전용 작업이기에 복제된 객체가 변결되기 전까지 스토리지 추가 요금 없음

* Time Travle
  - 데이터베이스, 테이블, 스키마의 이전버전을 복원할 수 있음
  - 최소 1일, 최대 90일(ENTERPRISE EDITION)
  
* 스토리지 계층에 대한 과금
  - 비압축 데이터가 아닌 압축 데이터의 일일 평균 크기 기준으로 계산
  - 대량 데이터 로딩 및 언로딩을 위해 준비된 영구 테이블 및 파일에 저장되어 유지되는 데이터 비용 포함
  - Time Travel , 삭제된 데이터를 참조등 저장 비용에 계산 
  
* Snowflake 캐싱 
  - 쿼리 제출시 해당 쿼리가 이전에 실행되었는지 여부 및 실행된 경우 결과가 저장되어있는지 확인
  - 쿼리결과 캐시, 가상 웨어하우스 캐시 및 메타데이터 캐시 총 3 종류가 있음 
  
* 쿼리 결과 캐시
  - 쿼리 결과는 24시간 동안 임시로 저장 
  - 결과 캐시는 24시간 동안 유지 되지만 최대 31일 내에 쿼리를 다시 실행하면 재 설정됨
  - 매개변수에 의해 비활성화 될 수 있는 유일한 캐시 
    * ALTER SESSION SET USE_CACHED_RESULT = FALSE; 

* 메타데이터 캐시
  - 사용자가 메타데이터에 대한 제어 권한은 있지만 캐시에 대한 제어 권한이 없는 글로벌 서비스 계층에서 관리 
  - SELECT COUNT(*) 사용시 통계가 메타데이터 캐시에 유지되어 나타낸다.
  - 메타 데이터 캐시에 저장된 정보는 쿼리 실해 계획을 맏느는데 사용된다.

* 가상 웨어하우스 로컬 디스크 캐시
  - 가상 웨어하우스 데이터 캐시는 크기가 제한되어 있으며 lru 알고리즘 사용한다. 
  - 가능하면 타당한 경우 쿼리를 위해 동일한 데이터를 엑세스 하는 사용자에게 동일한 환경을 할당해야한다. 
    웨어하우스 로컬 디스크 캐시에서 혜택을 받을 가능성이 높아진다.  

* 코드 정리 
  - 워크시트에서 캐시된 결과를 다시 TRUE로 설정하는 코드 
    USE ROLE SYSADMIN;
	ALTER SESSION SET USE_CACHED_rESULT=TRUE; 
  - 가상 웨어하우스를 삭제하는 코드 
    USE ROLE SYSADMIN;
	DROP WAREHOUSE CH2_WH;
	DROP WAREHOUSE ACCOUNTING_WH;