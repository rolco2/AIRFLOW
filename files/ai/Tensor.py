# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15u5_VgSiOOfyo5QNeqhTX8OLMK2yRYW_
"""

!pip list

# 리스트로부터 Tensor 생성
import torch

a = torch.tensor([1,2,3])
print(a, type(a))

# 다양한 방법으로 Tensor 생성
print("--- 2차원 리스트로부터 생성---")

b = torch.tensor([[1,2],
                  [3,4]])
print (b)

print("--- dtype을 지정하고, 배정도의 Tensor로 한다---")
c = torch.tensor([[1,2],
                  [3,4]], dtype=torch.float64)
print(c)

print("--0부터9까지 수치로 초기화--")
d = torch.arange(0,10)

print(d)

print("--모든 값이 0인 2x3의 Tensor--")
e = torch.zeros(2,3)

print(e)

print("--모든 값이 난수인 2x3의 Tensor--")
f = torch.rand(2,3)

print(f)

g = torch.linspace(-5, 5, 10)

print(g)

# NumPy 배열과 Tensor의 상호 변환
print ("-- Tensor -> Numpy")

a = torch.tensor([[1,2],[3,4]])

b=a.numpy()
print(b)

print("--NumPy->Tensor--")
c=torch.from_numpy(b)

print(c)

# 범위를 지정하여 Tensor의 일부에 접근
a = torch.tensor([[1,2,3],[4,5,6]])

print("-- 2개의 인덱스를 지정 --")
print(a[0,1])

print("--범위를 지정--")
print(a[1:2, :2])

print("-- 리스트로 여러 개의 인덱스를 지정 --")
print(a[:, [0,2]])

print("-- 3보다 큰 요소만을 지정 --")
print(a[a>3])

print("--요소의 변경--")
a[0, 2] = 11
print(a)

print("-- 요소의 일괄 변경--")
a[:,1] = 22
print(a)

print("--10 보다 큰 요소만 변경 --")
a[a>10] = 33
print(a)

# Tensor의 연산
a = torch.tensor([1,2,3])
b = torch.tensor([4,5,6])

# 행렬
c = torch.tensor([[6,5,4], [3,2,1]])

print("--백터와 스칼라의 연산--")
print(a+3)

print("--백터끼리 연산--")
print(a+b)

print("--행렬과 스칼라 연산--")
print(c+2)

print("--행렬과 백터의 연산(브로드캐스트) --")
print(c+a)

print("--행렬끼리의 연산 ---")
print(c+c)

# Tensor 형태 변환하기

a = torch.tensor([0,1,2,3,4,5,6,7]) # 1차원 Tensor
b = a.view(2,4)                     # (2,4)의 2차원 Tensor로 변환

print (a)
print (b)

c = torch.tensor([0,1,2,3,4,5,6,7]) # 1차원 Tensor
d = c.view(2,-1)                    # (2,4)의 2차원 Tensor로 변환

print(d)

e = torch.tensor([
                  [[0,1], [2,3]],
                  [[4,5], [6,7]]
                ])

f = e.view(-1)

print("--print e,f")
print (e)
print (f)

# squeeze() 메서드로 요소 수가 1인 차원을 삭제하기
print("--요소 수가 1인 차원이 포함되는 4차원 Tensor --")
g = torch.arange(0,8)
g1 = g.view(1,2,1,4)

print (g1)

print("--요소 수가 1인 차원을 삭제--")
h = g.squeeze()

print (h)


print("-- 2차원 Tensor--")
i = torch.arange(0,8).view(2,-1)

print("-- 요소 수가 1인 차원을 가장 안쪽 (2)에 추가 --")

j = i.unsqueeze(2)
print (j)


#다양한 통계값 계산

a = torch.tensor([[1,2,3], [4,5,6.]])

print("---평균값을 구하는 함수--")
m = torch.mean(a)
print(m.item())     #item()으로 값을 구한다.

print("---평균값을 구하는 메서드 --")
m = a.mean()
print(m.item())

print("--- 열별 평균값 --")
print(a.mean())

print("--- 합계값 ---")
print(torch.sum(a).item())

print("--- 최대값 ---")
print(torch.max(a).item())

print("--- 최소값 ---")
print(torch.min(a).item())

